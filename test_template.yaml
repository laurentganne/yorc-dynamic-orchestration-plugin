tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: TestDynamicOrchestration
  template_version: 0.1.0-SNAPSHOT
  template_author: lexis

description: "Dynamic orchestration test template"

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-openstack-types:3.0.0
  - org.lexis.common.heappe-types:1.0.3
  - org.lexis.common.dynamic-orchestration-types:0.1.0
  - org.lexis.common.ddi-types:0.1.3

topology_template:
  inputs:
    token:
      type: string
      required: true
      description: "Access token"
    input_dataset_path:
      type: string
      description: DDI path to input dataset
  node_templates:
    InputDatasetInfoJob:
      type: org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob
      properties:
        token: {get_input: token}
        dataset_path: {get_input: input_dataset_path}
    FirstVM:
      type: tosca.nodes.Compute
      requirements:
        - networkNetworkConnection:
            type_requirement: network
            node: FloatingIP1
            capability: yorc.capabilities.openstack.FIPConnectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            num_cpus: 1
            mem_size: "5 GB"
        os:
          properties:
            type: linux        
    SecondVM:
      type: tosca.nodes.Compute
      requirements:
        - networkNetworkConnection:
            type_requirement: network
            node: FloatingIP2
            capability: yorc.capabilities.openstack.FIPConnectivity
            relationship: tosca.relationships.Network
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: "4 GB"
            disk_size: "21 GB"
        os:
          properties:
            type: linux
    FloatingIP1:
      type: yorc.nodes.openstack.FloatingIP
    FloatingIP2:
      type: yorc.nodes.openstack.FloatingIP
    SetLocations:
      type: org.lexis.common.dynamic.orchestration.nodes.SetLocations
      properties:
        token: { get_input: token }
      requirements:
        - CloudResourceFirstVM:
            type_requirement: cloud_instance
            node: SecondVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
        - CloudResourceSecondVM:
            type_requirement: cloud_instance
            node: FirstVM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.dynamic.orchestration.relationships.CloudResource
        - InputDataset:
            type_requirement: input_dataset
            node: InputDatasetInfoJob
            capability: org.lexis.common.ddi.capabilities.DatasetInfo
            relationship: org.lexis.common.dynamic.orchestration.relationships.Dataset
  workflows:
    install:
      steps:
        InputDatasetInfoJob_submit:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - InputDatasetInfoJob_run
        InputDatasetInfoJob_run:
          target: InputDatasetInfoJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - InputDatasetInfoJob_executed
        InputDatasetInfoJob_executed:
          target: InputDatasetInfoJob
          activities:
            - set_state: executed
          on_success:
            - SetLocations_FirstVM_pre_configure_source
        SetLocations_FirstVM_pre_configure_source:
          target: SetLocations
          target_relationship: CloudResourceFirstVM
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Configure.pre_configure_source
          on_success:
            - SetLocations_SecondVM_pre_configure_source
            - SetLocations_start
        SetLocations_SecondVM_pre_configure_source:
          target: SetLocations
          target_relationship: CloudResourceSecondVM
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Configure.pre_configure_source
          on_success:
            - SetLocations_DatasetInfo_pre_configure_source
            - SetLocations_start
        SetLocations_DatasetInfo_pre_configure_source:
          target: SetLocations
          target_relationship: InputDataset
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: Configure.pre_configure_source
          on_success:
            - SetLocations_start
        SetLocations_start:
          target: SetLocations
          activities:
            - call_operation: Standard.start
          on_success:
            - SetLocations_started
        SetLocations_started:
          target: SetLocations
          activities:
            - set_state: started
          on_success:
            - FloatingIP1_install
        FloatingIP1_install:
          target: FloatingIP1
          activities:
            - delegate: install
          on_success:
            - FirstVM_install
        FirstVM_install:
          target: FirstVM
          activities:
            - delegate: install